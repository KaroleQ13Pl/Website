@tailwind base;
@tailwind components;
@tailwind utilities;

/* Aliasy klas tematycznych */
.light-background {
  @apply bg-light-background;
}

.light-surface {
  @apply bg-light-surface;
}

.light-text {
  @apply text-light-text;
}

.light-heading {
  @apply text-light-heading;
}

.light-primary {
  @apply bg-light-primary text-white; /* Przykład z tekstem białym */
}

.light-secondary {
  @apply bg-light-secondary;
}

.light-accent {
  @apply bg-light-accent;
}

.light-border {
  @apply border-light-border;
}

.light-muted {
  @apply text-light-muted;
}

.dark-background {
  @apply bg-dark-background;
}

.dark-surface {
  @apply bg-dark-surface;
}

.dark-text {
  @apply text-dark-text;
}

.dark-heading {
  @apply text-dark-heading;
}

.dark-primary {
  @apply bg-dark-primary text-white;
}

.dark-secondary {
  @apply bg-dark-secondary;
}

.dark-accent {
  @apply bg-dark-accent;
}

.dark-border {
  @apply border-dark-border;
}

.dark-muted {
  @apply text-dark-muted;
}

/* Dodaj te style na początku, jeśli jeszcze ich nie masz */
@layer base {
  html {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    scroll-behavior: smooth; /* Płynne przewijanie */
  }
  body {
    @apply font-sans; /* Używa Inter zdefiniowanego w tailwind.config.js */
    /* Możesz tutaj dodać domyślny kolor tekstu i tła dla body,
       ale ThemeContext i klasy w App.jsx już to obsługują */
  }
  /* Styl dla paska przewijania (opcjonalnie, dla nowoczesnego wyglądu) */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  ::-webkit-scrollbar-track {
    @apply bg-light-surface dark:bg-dark-surface rounded-md;
  }
  ::-webkit-scrollbar-thumb {
    @apply bg-light-border dark:bg-dark-border rounded-md;
  }
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-light-muted dark:bg-dark-muted;
  }
}

/* Twoje aliasy klas tematycznych - są OK */
.light-background {
  @apply bg-light-background;
}
/* ... reszta Twoich aliasów ... */
.dark-muted {
  @apply text-dark-muted;
}

/* Dodatkowe style dla textarea, aby automatycznie się rozszerzała (prosty przykład) */
@layer components {
  textarea[rows="1"] {
    /* Można by to bardziej zaawansowanie zrobić z JavaScriptem
       do precyzyjnego dopasowywania wysokości do treści,
       ale to prosty CSS, który trochę pomoże */
    min-height: calc(
      1.5em + 1.5rem
    ); /* padding-py (0.75rem * 2) + line-height */
  }
}
